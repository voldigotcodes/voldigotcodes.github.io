% Selects a random element from a list
random_element(List, Element) :-
    length(List, Length),
    random_between(0, Length - 1, Index),
    nth0(Index, List, Element).
  
  % Randomly selects a triplet of points from the list of points
  random3points(Points, [P1, P2, P3]) :-
    random_element(Points, P1),
    random_element(Points, P2),
    random_element(Points, P3),
    P1 \== P2, P1 \== P3, P2 \== P3.
  
  % Calculates the cross product of two vectors
  cross_product([X1, Y1, Z1], [X2, Y2, Z2], [X3, Y3, Z3]) :-
    X3 is Y1 * Z2 - Z1 * Y2,
    Y3 is Z1 * X2 - X1 * Z2,
    Z3 is X1 * Y2 - Y1 * X2.
  
  % Calculates the equation of the plane defined by the three points in Point3
  plane([[X1, Y1, Z1], [X2, Y2, Z2], [X3, Y3, Z3]], [A, B, C, D]) :-
    cross_product([X2 - X1, Y2 - Y1, Z2 - Z1], [X3 - X1, Y3 - Y1, Z3 - Z1], [A, B, C]),
    D is -(A * X1 + B * Y1 + C * Z1).
  
  % Calculates the distance from a point to a plane
  point_to_plane_distance([A, B, C, D], [X, Y, Z], Distance) :-
    Distance is abs(A * X + B * Y + C * Z + D) / sqrt(A * A + B * B + C * C).
  
  % Filters points within the given Eps distance to the plane
  support_point(Plane, Eps, Point) :-
    point_to_plane_distance(Plane, Point, Distance),
    Distance =< Eps.
  
  % Determines the support of the plane composed of N points from the list of points Points when the distance Eps is used
  support(Plane, Points, Eps, N) :-
    findall(Point, (member(Point, Points), support_point(Plane, Eps, Point)), SupportPoints),
    length(SupportPoints, N).
  
  % Calculates the number of iterations required by RANSAC with parameters Confidence and Percentage
  ransac_number_of_iterations(Confidence, Percentage, N) :-
    N is ceil(log(1 - Confidence) / log(1 - Percentage ** 3)).

% Test cases for random3points
test(random3points, 1) :-
    random3points([[1,2,3], [4,5,6], [7,8,9], [10,11,12]], Point3),
    length(Point3, 3).
  
  % Test cases for plane
  test(plane, 1) :- plane([[1,0,0], [0,1,0], [0,0,1]], [1,1,1,-1]).
  
  % Test cases for support
  test(support, 1) :- support([1,1,1,-1], [[1,0,0], [0,1,0], [0,0,1]], 1, 1).
test(support, 2) :- support([1,1,1,-1]).